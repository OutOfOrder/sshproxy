#!/usr/bin/env python
# -*- coding: ISO-8859-15 -*-
#
# Copyright (C) 2005-2006 David Guerizec <david@guerizec.net>
#
# Last modified: 2006 Jun 04, 02:11:39 by david
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA

#raise 'use util classes !'
import sys, base64, getpass

from SSHproxy import config
from SSHproxy.cipher import cipher, decipher, SSHproxyConfig
from SSHproxy.pwdb.mysql import db, Q

conf = config.SSHproxyConfig()

dry_run = False

def usage():
    print '''Usage: %s <cipher_type> [<secret>]''' % sys.argv[0]
    print 
    print '''       cipher_type is one of 'plain', 'base64', 'blowfish' '''
    print ('''       secret is optionnal for blowfish and ignored for'''
                                                    '''plain and base64''')
    print '''       if secret is not given for blowfish, the old one is taken'''
    print '''       if secret is empty, it is prompted'''
    sys.exit(0)


newsecret = ''
if len(sys.argv) in (2, 3) :
    cipher_type = sys.argv[1]
else:
    usage()

if cipher_type == 'blowfish':
    if len(sys.argv) != 3:
        newsecret = SSHproxyConfig().secret
    else:
        newsecret = sys.argv[2]
    if not newsecret:
        sec1 = 1
        sec2 = 2
        while not sec1 or sec1 != sec2:
            sec1 = getpass.getpass("Enter secret (1/2)")
            sec2 = getpass.getpass("Enter secret (2/2)")
        newsecret = sec1
elif cipher_type not in ('plain', 'base64'):
    print "unknown cipher_type", cipher_type
    usage()


conf.newsecret = newsecret
dry_run or conf._write() # just in case it goes wrong in the middle

c = db.cursor()

users = c.execute("select * from user")

for id, site_id, uid, password, primary in c.fetchall():
    # decipher with old secret
    password = decipher(password)
    print password, 
    # cipher with new secret
    newpass = cipher(password, type=cipher_type, secret=newsecret)
    print newpass, decipher(newpass, secret=newsecret)
    u = db.cursor()
    query = "update user set password = '%s' where id = %d" % (newpass, id)
    print query
    dry_run or u.execute(query)
    u.close()

c.close()

del conf.newsecret
# update secret
conf.secret = newsecret
conf.cipher_type = cipher_type
dry_run or conf._write()


