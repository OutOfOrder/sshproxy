#!/usr/bin/env python
# -*- coding: ISO-8859-15 -*-
#
# Copyright (C) 2005-2006 David Guerizec <david@guerizec.net>
#
# Last modified: 2006 Jun 02, 03:18:30 by david
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA

raise 'use util classes !'
import sys, base64

from Crypto.Cipher import Blowfish

from SSHproxy import config
from SSHproxy import util
from SSHproxy.pwdb.mysql import db, Q

conf = config.SSHproxyConfig()

newsecret = ''
if len(sys.argv) > 1:
    newsecret = sys.argv[1]

if newsecret == conf.secret:
    print 'Same secrets, doing nothing'
    sys.exit(0)

def cipher(text):
    ftext = '%s:%s%s' % (len(text), text, '*'*8)
    ftext = ftext[:len(ftext) - (len(ftext)%8) ]
    return '$cipher$' + base64.b64encode(_cipher_engine.encrypt(ftext))

def decipher(text):
    if text[:8] == '$cipher$':
        text = text[8:]
        size, ftext = _cipher_engine.decrypt(base64.b64decode(text)).split(':', 1)
        return ftext[:int(size)]
    else:
        return text

if newsecret:
    _cipher_engine = Blowfish.new(newsecret, Blowfish.MODE_ECB)
else:
    class NullCipher(object):
        def encrypt(self, text): return text
        def decrypt(self, text): return text

    _cipher_engine = NullCipher()


conf.newsecret = newsecret

c = db.cursor()

users = c.execute("select * from user")

for id, site_id, uid, password, primary in c.fetchall():
    # decipher with old secret
    password = util.decipher(password)
    print password
    # cipher with new secret
    newpass = cipher(password)
    u = db.cursor()
    u.execute("update user set password = '%s' where id = %d" % (newpass, id))
    u.close()

c.close()

del conf.newsecret
# update secret
conf.secret = newsecret
conf._write()


