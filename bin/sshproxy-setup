#!/usr/bin/env python
# -*- coding: ISO-8859-15 -*-
#
# Copyright (C) 2005-2006 David Guerizec <david@guerizec.net>
#
# Last modified: 2006 Jul 28, 01:27:26 by david
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA

import sys, os, pwd
from optparse import OptionParser

from sshproxy import __version__

usage = """
  %prog [--config-dir CFGDIR] --wizard
      Launch the wizard for a first installation setup.
  
  %prog [--config-dir CFGDIR] --backend
      Open the backend console if available.

  %prog [--config-dir CFGDIR] --cipher ENGINE [--keep] [--dry-run]
      Recipher the database.
"""

version = "%prog " + __version__

parser = OptionParser(usage=usage, version=version)

##### runtime options
parser.add_option("-c", "--config-dir", dest="config", default=None,
                    help="configuration directory (default: ~/.sshproxy).",
                    metavar="CFGDIR")

#parser.add_option("-V", "--version", dest="version", default=None,
#                    help="Show the version number.")

##### special actions options
parser.add_option("-w", "--wizard", dest="wizard", default=False,
                    help="run setup wizard.", action="store_true")
parser.add_option("-b", "--backend", dest="backend", default=False,
                    help="run backend console.", action="store_true")

##### recipher options
parser.add_option("", "--cipher", dest="cipher", default=None,
                    help="cipher rlogin passwords with ENGINE. "
                         "ENGINE can be one of plain, base64 or blowfish. "
                         "The password will be prompted, if needed, or if "
                         "- is on the command line, it will be read "
                         "from stdin.",
                    metavar="ENGINE")
parser.add_option("-k", "--keep", dest="keep", default=False,
                    help="Along with --cipher, keep the old secret "
                         "(do not ask for a new secret). "
                         "This option has no effect with other options.",
                    action="store_true")
parser.add_option("-n", "--dry-run", dest="dry_run", default=False,
                    help="Along with --cipher, do not modify anything. "
                         "This option has no effect with other options.",
                    action="store_true")

# if there is no options, display help
if len(sys.argv) == 1:
    sys.argv.append('--help')

(options, args) = parser.parse_args()

#configdir = os.path.join(os.getcwd(), (options.config
#                                or os.environ.get('SSHPROXY_CONFIG', '')))
#os.environ['SSHPROXY_CONFIG'] = configdir
os.environ['SSHPROXY_CONFIG'] = (options.config
                                or os.environ.get('SSHPROXY_CONFIG', ''))
#if not os.environ['SSHPROXY_CONFIG'] and options.user:
#    os.environ['SSHPROXY_CONFIG'] = os.path.join(pwd.getpwnam(options.user)[5],
#                                                    '.sshproxy')

exclusive_options = ('wizard', 'backend', 'cipher')
nb_opt = 0
for opt in exclusive_options:
    if getattr(options, opt.replace('-', '_'), None):
        nb_opt += 1

if nb_opt > 1:
    print "Options %s are mutually exclusives." % ', '.join(exclusive_options)
    sys.exit(1)


if options.wizard:
    from sshproxy import wizard
    wizard.setup()


elif options.backend:
    from sshproxy.plugins import init_plugins
    init_plugins()
    from sshproxy.backend import get_backend
    backend = get_backend()
    console = backend.get_console()
    if not console:
        print ("Sorry, but the %s backend has no administration console." % 
                                                            backend.backend_id)
    else:
        try:
            console.cmdloop()
        except KeyboardInterrupt:
            pass

elif options.cipher:
    from sshproxy.plugins import init_plugins
    init_plugins()
    from sshproxy import cipher
    password = options.keep
    if '-' in args:
        password = sys.stdin
    cipher.recipher(options.cipher, password, options.dry_run)

